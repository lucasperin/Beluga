/*************************************************************************
Analisador l�xico para a Beluga

Baseado em X++
************************************************************************/
options {
  STATIC = false;
}

PARSER_BEGIN(langB)
package parser;

import java.io.*;


public class langB {
final static String Version = "Compilador Beluga - 2013/1";
boolean Menosshort = false; // sa�da resumida = falso


// Define o m�todo "main" da classe langB.  
  public  static void main(String args[]) throws ParseException 
  {
    String filename = ""; // nome do arquivo a ser analisado
    langB parser;     // analisador l�xico/sint�tico
    int i;
    boolean ms = false;

    System.out.println(Version);
    // l� os par�metros passados para o compilador
    // verificar a necessidade deste for.
    for (i = 0; i < args.length - 1; i++)
    {
    if ( args[i].toLowerCase().equals("-short") )
      ms = true;
    else
        {
           System.out.println("Uso correto deve ser: java langB [-short] arquivo_de_entrada");
           System.exit(0);
        }
    }

    if (args[i].equals("-"))
    {       // l� da entrada padr�o      
        System.out.println("Lendo da entrada padrao . . .");
        parser = new langB(System.in);
     }
     else 
    {       // l� do arquivo
        filename = args[args.length-1];  
        System.out.println("Lendo do arquivo " + filename + " . . .");
        try {
            parser = new langB(new java.io.FileInputStream(filename));
        } 
    catch (java.io.FileNotFoundException e) {
               System.out.println("Arquivo " + filename + " nao .");
        return;
        }
    } 
    parser.Menosshort = ms;
    parser.program();   // chama o m�todo que faz a an�lise
    if ( parser.token_source.foundLexError() != 0 ) // verifica se houve erro l�xico
        System.out.println(parser.token_source.foundLexError() + " Erros lexicos encontrados");
    else
        System.out.println("Programa analisado corretamente.");
}  // main

static public String im(int x)
{
int k;
String s;
   s = tokenImage[x];
   k = s.lastIndexOf("\"");
   try {s = s.substring(1,k);}
   catch (StringIndexOutOfBoundsException e)
   {}
   return s;
}

}  // langB/

PARSER_END(langB)

/************************************************************************/

TOKEN_MGR_DECLS :
{
int countLexError = 0;

public int foundLexError()
{
   return countLexError;
}

}

/************************************************************************/
/* Espa�os a serem desprezados no in�cio de cada token */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SKIP :
{
  "/*" : multilinecomment
}

SKIP :
{
  "//" : singlelinecomment
}

<multilinecomment> SKIP:
{
   "*/" : DEFAULT
|  <~[]>
}

<singlelinecomment> SKIP:
{
   <["\n","\r"]> : DEFAULT
|   <~[]>
}


/* Palavras reservadas */

TOKEN :
{
  < BREAK: "parar" > 
| < CLASS: "classe" >
| < CONSTRUCTOR: "construtor" >
| < ELSE: "senao" >
| < EXTENDS: "herda" >
| < FOR: "para" >
| < IF: "se" >
| < THEN: "entao" >
| < INT: "inteiro" >
| < NEW: "novo" >
| < PRINT: "imprimir" >
| < READ: "ler" >
| < RETURN: "retornar" >
| < STRING: "texto" >
| < SUPER: "super" >
| < BOOLEAN: "cara_coroa" >
| < TRUE: "cara" >
| < FALSE: "coroa" >
| < WHILE: "enquanto" >
| < SWITCH: "trocar" >
| < CASE: "caso" >
}

/* constantes */

TOKEN :
{
  < int_constant:(  // n�meros decimais, octais, hexadecimais ou bin�rios
                  (["0"-"9"] (["0"-"9"])* ) | 
                  (["0"-"7"] (["0"-"7"])* ["o", "O"] ) |
                  (["0"-"9"] (["0"-"7","A"-"F","a"-"f"])* ["h", "H"] ) |
                  (["0"-"1"] (["0"-"1"])* ["b", "B"])
                 ) >
|
  < string_constant:    // constante string como "abcd bcda"
      "\""( ~["\"","\n","\r"])* "\"" >
|
  < null_constant: "nulo" > // constante nula
}

/* Identificadores */

TOKEN :
{
  < IDENT: <LETTER> (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
|
  < #LETTER:["A"-"Z","a"-"z"] >
|
  < #DIGIT:["0"-"9"] >
|
  < #UNDERSCORE:["_"] >
}

/* S�mbolos especiais */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < DDOT: ":" >
| < QUESTIONMARK: "?" >
}

/* Operadores */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NEQ: "!=" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < REM: "%" >
| < OR: "|" >
| < AND: "&" >
}

/* Trata os erros l�xicos */
SPECIAL_TOKEN :
{
<INVALID_LEXICAL: 
(~ ["a"-"z", "A"-"Z", "_", ":", "?",
  "0"-"9",
  "\"",
  "(",
  ")",
  "[",
  "]",
  "{",
  "}",
  ";",
  ",",
  ".",
  "=",
  ">",
  "<",
  "!",
  "+",
  "-",
  "*",
  "/",
  "%",
  "|",
  "&",
  " ",
  "\t",
  "\n",
  "\r",
  "\f"
])+>
   {
    System.err.println("Na linha " + input_stream.getEndLine() + 
                           " - texto invalido: " + image);
    countLexError++;
   }
|
   <INVALID_CONST: 
   "\"" (~ ["\n","\r","\""])* ["\n","\r"]>
   {
    System.err.println("Na linha " + input_stream.getEndLine() + 
                           " - Texto constante possui \\n: " + image);
    countLexError++;
   }

}



JAVACODE void program()
{
Token t;
    do
    {
    t = getNextToken();
    Token st = t;
        while ( st.specialToken != null)
        st = st.specialToken;
        do {
           if ( Menosshort )
          System.out.println(st.image + "  " + 
                                 im(st.kind) + " " +
                                 st.kind);
           else
              System.out.println("Linha: " + st.beginLine + 
                                 " Coluna: " + st.beginColumn + 
                                 " " + st.image +
                                 "  " + im(st.kind) + "  "+t.kind);
          st = st.next;       
        } while (st != t.next);
    } while (t.kind != langBConstants.EOF);  
}
