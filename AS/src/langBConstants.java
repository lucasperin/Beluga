/* Generated By:JavaCC: Do not edit this line. langBConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface langBConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BREAK = 12;
  /** RegularExpression Id. */
  int CLASS = 13;
  /** RegularExpression Id. */
  int CONSTRUCTOR = 14;
  /** RegularExpression Id. */
  int ELSE = 15;
  /** RegularExpression Id. */
  int EXTENDS = 16;
  /** RegularExpression Id. */
  int FOR = 17;
  /** RegularExpression Id. */
  int IF = 18;
  /** RegularExpression Id. */
  int THEN = 19;
  /** RegularExpression Id. */
  int INT = 20;
  /** RegularExpression Id. */
  int NEW = 21;
  /** RegularExpression Id. */
  int PRINT = 22;
  /** RegularExpression Id. */
  int READ = 23;
  /** RegularExpression Id. */
  int RETURN = 24;
  /** RegularExpression Id. */
  int STRING = 25;
  /** RegularExpression Id. */
  int SUPER = 26;
  /** RegularExpression Id. */
  int BOOLEAN = 27;
  /** RegularExpression Id. */
  int WHILE = 28;
  /** RegularExpression Id. */
  int SWITCH = 29;
  /** RegularExpression Id. */
  int CASE = 30;
  /** RegularExpression Id. */
  int DEFAULT_CASE = 31;
  /** RegularExpression Id. */
  int VAR = 32;
  /** RegularExpression Id. */
  int VOID = 33;
  /** RegularExpression Id. */
  int int_constant = 34;
  /** RegularExpression Id. */
  int string_constant = 35;
  /** RegularExpression Id. */
  int null_constant = 36;
  /** RegularExpression Id. */
  int boolean_constant = 37;
  /** RegularExpression Id. */
  int IDENT = 38;
  /** RegularExpression Id. */
  int LETTER = 39;
  /** RegularExpression Id. */
  int DIGIT = 40;
  /** RegularExpression Id. */
  int UNDERSCORE = 41;
  /** RegularExpression Id. */
  int LPAREN = 42;
  /** RegularExpression Id. */
  int RPAREN = 43;
  /** RegularExpression Id. */
  int LBRACE = 44;
  /** RegularExpression Id. */
  int RBRACE = 45;
  /** RegularExpression Id. */
  int LBRACKET = 46;
  /** RegularExpression Id. */
  int RBRACKET = 47;
  /** RegularExpression Id. */
  int SEMICOLON = 48;
  /** RegularExpression Id. */
  int COMMA = 49;
  /** RegularExpression Id. */
  int DOT = 50;
  /** RegularExpression Id. */
  int DDOT = 51;
  /** RegularExpression Id. */
  int QUESTIONMARK = 52;
  /** RegularExpression Id. */
  int ASSIGN = 53;
  /** RegularExpression Id. */
  int GT = 54;
  /** RegularExpression Id. */
  int LT = 55;
  /** RegularExpression Id. */
  int EQ = 56;
  /** RegularExpression Id. */
  int LE = 57;
  /** RegularExpression Id. */
  int GE = 58;
  /** RegularExpression Id. */
  int NEQ = 59;
  /** RegularExpression Id. */
  int PLUS = 60;
  /** RegularExpression Id. */
  int MINUS = 61;
  /** RegularExpression Id. */
  int STAR = 62;
  /** RegularExpression Id. */
  int SLASH = 63;
  /** RegularExpression Id. */
  int REM = 64;
  /** RegularExpression Id. */
  int OR = 65;
  /** RegularExpression Id. */
  int AND = 66;
  /** RegularExpression Id. */
  int INVALID_LEXICAL = 67;
  /** RegularExpression Id. */
  int INVALID_CONST = 68;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int multilinecomment = 1;
  /** Lexical state. */
  int singlelinecomment = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/*\"",
    "\"//\"",
    "\"*/\"",
    "<token of kind 9>",
    "<token of kind 10>",
    "<token of kind 11>",
    "\"parar\"",
    "\"classe\"",
    "\"construtor\"",
    "\"senao\"",
    "\"herda\"",
    "\"para\"",
    "\"se\"",
    "\"entao\"",
    "\"inteiro\"",
    "\"novo\"",
    "\"imprimir\"",
    "\"ler\"",
    "\"retornar\"",
    "\"texto\"",
    "\"super\"",
    "\"cara_coroa\"",
    "\"enquanto\"",
    "\"trocar\"",
    "\"caso\"",
    "\"padrao\"",
    "\"variavel\"",
    "\"vazio\"",
    "<int_constant>",
    "<string_constant>",
    "\"nulo\"",
    "<boolean_constant>",
    "<IDENT>",
    "<LETTER>",
    "<DIGIT>",
    "<UNDERSCORE>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "\"?\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"|\"",
    "\"&\"",
    "<INVALID_LEXICAL>",
    "<INVALID_CONST>",
  };

}
